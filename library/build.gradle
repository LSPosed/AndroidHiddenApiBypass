import com.android.build.api.dsl.ManagedVirtualDevice

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdk 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdk 1
        targetSdk 30
        versionCode 2
        versionName "2.0"
        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/**'
            excludes += '/*.properties'
        }
    }

    testOptions {
        devices {
            api30(ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 30
                abi = "x86_64"
            }
            api29(ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 29
                abi = "x86_64"
            }
            api28(ManagedVirtualDevice) {
                device = "Pixel 2"
                apiLevel = 28
                abi = "x86_64"
            }
        }
        deviceGroups {
            phones {
                targetDevices.addAll(devices)
            }
        }
        emulatorSnapshots {
            enableForTestFailures false
            maxSnapshotsForTestFailures 0
        }
    }

}

dependencies {
    compileOnly project(":stub")
    compileOnly 'androidx.annotation:annotation:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestCompileOnly project(":stub")
}

afterEvaluate {
    android.libraryVariants.collect { variant ->
        task("generate${variant.name.capitalize()}SourcesJar", type: Jar) {
            from variant.javaCompileProvider.get().source
            exclude '**/BuildConfig.java'
            classifier 'sources'
        }
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                options.addStringOption "-release", "8"
            }
            source variant.javaCompileProvider.get().source
            exclude '**/BuildConfig.java'
            classpath += variant.javaCompileProvider.get().classpath
            classpath += files(android.getBootClasspath())
            classpath += tasks.getByName("generate${variant.name.capitalize()}BuildConfig").getOutputs().files
            options {
                failOnError false
                encoding 'UTF-8'
                links 'https://docs.oracle.com/javase/8/docs/api/'
                links 'https://developer.android.com/reference/androidx/'
            }
        }
        task("generate${variant.name.capitalize()}JavadocJar", type: Jar) {
            dependsOn "generate${variant.name.capitalize()}Javadoc"
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            classifier 'javadoc'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            group 'org.lsposed.hiddenapibypass'
            artifactId 'hiddenapibypass'
            version android.defaultConfig.versionName
            afterEvaluate {
                artifact tasks.getByName("bundleReleaseAar")
                artifact tasks.getByName("generateReleaseJavadocJar")
                artifact tasks.getByName("generateReleaseSourcesJar")
            }
            pom {
                name = 'Android Hidden Api Bypass'
                description = 'Bypass restrictions on non-SDK interfaces'
                url = 'https://github.com/LSPosed/AndroidHiddenApiBypass'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Lsposed'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/LSPosed/AndroidHiddenApiBypass.git'
                    url = 'https://github.com/LSPosed/AndroidHiddenApiBypass'
                }
            }
        }
    }
    repositories {
        maven {
            name 'ossrh'
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials PasswordCredentials
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    def secretKeyRingFile = findProperty("signing.secretKeyRingFile")

    if (secretKeyRingFile != null && file(secretKeyRingFile).exists()) {
        sign publishing.publications
    } else if (signingKey != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }
}
